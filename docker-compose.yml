services:
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "127.0.0.1:11434:11434" # または "0.0.0.0:11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    # GPUを使用する場合 (NVIDIAの場合) - 必要に応じてコメント解除
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: always

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fast_mcp_app
    working_dir: /app
    environment:
      - OLLAMA_HOST=http://ollama:11434
    volumes:
      - .:/app:delegated            # ローカルソース
      - uv_cache:/root/.cache/uv    # uv キャッシュ
    # 初回起動でpyproject.pyが存在しない(uv initが実行されていない時)uv initを実行、その後アプリを実行。
    command: ["sh", "-c", "[ -x pyproject.py ] || uv init; [ -x .venv/bin/python ] || uv sync; uv run hello.py; tail -f /dev/null"]
    # 例: API を公開したい場合
    # ports:
    #   - "8000:8000"
    depends_on:
      - ollama
    restart: no

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    depends_on: [otel-collector]

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.111.0
    command: ["--config=/otel-collector-config.yaml"]   # パスを明示
    volumes:
      - ./otel-collector-config.yaml:/otel-collector-config.yaml  # ${PWD} を避ける

  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/data
    environment:
      - CHROMA_OPEN_TELEMETRY__ENDPOINT=http://otel-collector:4317/
      - CHROMA_OPEN_TELEMETRY__SERVICE_NAME=chroma
    depends_on:
      - otel-collector
      - zipkin

volumes:
  ollama_data:
  chroma_data:
  uv_cache: